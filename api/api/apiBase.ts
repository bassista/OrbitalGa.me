/* This file was generated by https://github.com/schema-driven-rest/plugin-serverless-api-base */
/* tslint:disable */

export abstract class BaseUserController {
  abstract doThing(request: DoThingRequest, headers?: any): Promise<DoThingResponse>;
}

/* This file was generated by https://github.com/schema-driven-rest/plugin-models */
export type Maybe<T> = T | undefined;
type FixDecorator<T> = T; /** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export interface DoThingResponse {
  jwt: Scalars['String'];
}

export interface DoThingRequest {
  shoes: Maybe<Scalars['String']>;
}

/* This file was generated by https://github.com/schema-driven-rest/plugin-validate-models */
/* tslint:disable */
export function validateDoThingRequest(model: DoThingRequest) {
  if (model === null || model === undefined) return false;
  let fieldCount = 0;
  if (model.shoes !== null && model.shoes !== undefined) {
    fieldCount++;
    if (typeof model.shoes !== 'string') {
      return false;
    }
  }
  if (Object.keys(model).length !== fieldCount) return false;
  return true;
}
export function validateDoThingResponse(model: DoThingResponse) {
  if (model === null || model === undefined) return false;
  let fieldCount = 0;
  if (model.jwt === null || model.jwt === undefined) {
    return false;
  }
  fieldCount++;
  if (typeof model.jwt !== 'string') {
    return false;
  }
  if (Object.keys(model).length !== fieldCount) return false;
  return true;
}
