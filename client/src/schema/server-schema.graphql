type ErrorResponse {
  error: String!
}

type GameModel {
  serverId: Int!
  serverUrl: String!
}

type LeaderboardResponse {
  aliveTime: Int!
  anonymous: Boolean!
  createdAt: Timestamp!
  damageGiven: Int!
  damageTaken: Int!
  enemiesKilled: Int!
  eventsParticipatedIn: Int!
  score: Int!
  sessionId: String!
  shotsFired: Int!
  username: String!
}

input LoginAnonymousInput {
  userName: String!
}

input LoginInput {
  password: String!
  userName: String!
}

type LoginSuccess {
  gameModel: GameModel
  jwt: String!
}

union LoginSuccessResponse = LoginSuccess | ErrorResponse

type Mutation {
  login(request: LoginInput!): LoginSuccessResponse!
  loginAnonymous(request: LoginAnonymousInput!): LoginSuccessResponse!
  register(request: LoginInput!): LoginSuccessResponse!
}

type Query {
  spectate: SpectateResponse!
  leaderboard(serverId: Int): [LeaderboardResponse!]!
}

type SpectateResponse {
  gameModel: GameModel
  spectateJwt: String!
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp
